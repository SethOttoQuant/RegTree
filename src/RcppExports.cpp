// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// select_rnd
arma::uvec select_rnd(arma::uword m, arma::uword n);
RcppExport SEXP _RegTree_select_rnd(SEXP mSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(select_rnd(m, n));
    return rcpp_result_gen;
END_RCPP
}
// quickreg
arma::field<arma::vec> quickreg(arma::vec x, arma::vec y, double r);
RcppExport SEXP _RegTree_quickreg(SEXP xSEXP, SEXP ySEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(quickreg(x, y, r));
    return rcpp_result_gen;
END_RCPP
}
// find_cut
arma::field<arma::vec> find_cut(arma::vec x, arma::vec y, arma::uvec ind);
RcppExport SEXP _RegTree_find_cut(SEXP xSEXP, SEXP ySEXP, SEXP indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ind(indSEXP);
    rcpp_result_gen = Rcpp::wrap(find_cut(x, y, ind));
    return rcpp_result_gen;
END_RCPP
}
// best_split
arma::field<arma::vec> best_split(arma::mat X, arma::vec y, arma::uvec ind, arma::uword n);
RcppExport SEXP _RegTree_best_split(SEXP XSEXP, SEXP ySEXP, SEXP indSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ind(indSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(best_split(X, y, ind, n));
    return rcpp_result_gen;
END_RCPP
}
// testfun
arma::uvec testfun(arma::vec x);
RcppExport SEXP _RegTree_testfun(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(testfun(x));
    return rcpp_result_gen;
END_RCPP
}
// RegTree
arma::mat RegTree(arma::vec y, arma::mat X, arma::uword max_nodes, double bag_rows, double bag_cols);
RcppExport SEXP _RegTree_RegTree(SEXP ySEXP, SEXP XSEXP, SEXP max_nodesSEXP, SEXP bag_rowsSEXP, SEXP bag_colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type max_nodes(max_nodesSEXP);
    Rcpp::traits::input_parameter< double >::type bag_rows(bag_rowsSEXP);
    Rcpp::traits::input_parameter< double >::type bag_cols(bag_colsSEXP);
    rcpp_result_gen = Rcpp::wrap(RegTree(y, X, max_nodes, bag_rows, bag_cols));
    return rcpp_result_gen;
END_RCPP
}
// FitVec
double FitVec(arma::vec x, arma::mat Tree, arma::uword maxit);
RcppExport SEXP _RegTree_FitVec(SEXP xSEXP, SEXP TreeSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Tree(TreeSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(FitVec(x, Tree, maxit));
    return rcpp_result_gen;
END_RCPP
}
// FitMat
arma::vec FitMat(arma::mat X, arma::mat Tree);
RcppExport SEXP _RegTree_FitMat(SEXP XSEXP, SEXP TreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Tree(TreeSEXP);
    rcpp_result_gen = Rcpp::wrap(FitMat(X, Tree));
    return rcpp_result_gen;
END_RCPP
}
// RegForest
arma::field<arma::mat> RegForest(arma::vec y, arma::mat X, arma::uword max_nodes, arma::uword draws);
RcppExport SEXP _RegTree_RegForest(SEXP ySEXP, SEXP XSEXP, SEXP max_nodesSEXP, SEXP drawsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type max_nodes(max_nodesSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type draws(drawsSEXP);
    rcpp_result_gen = Rcpp::wrap(RegForest(y, X, max_nodes, draws));
    return rcpp_result_gen;
END_RCPP
}
// FitField
arma::vec FitField(arma::mat X, arma::field<arma::mat> Trees);
RcppExport SEXP _RegTree_FitField(SEXP XSEXP, SEXP TreesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type Trees(TreesSEXP);
    rcpp_result_gen = Rcpp::wrap(FitField(X, Trees));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RegTree_select_rnd", (DL_FUNC) &_RegTree_select_rnd, 2},
    {"_RegTree_quickreg", (DL_FUNC) &_RegTree_quickreg, 3},
    {"_RegTree_find_cut", (DL_FUNC) &_RegTree_find_cut, 3},
    {"_RegTree_best_split", (DL_FUNC) &_RegTree_best_split, 4},
    {"_RegTree_testfun", (DL_FUNC) &_RegTree_testfun, 1},
    {"_RegTree_RegTree", (DL_FUNC) &_RegTree_RegTree, 5},
    {"_RegTree_FitVec", (DL_FUNC) &_RegTree_FitVec, 3},
    {"_RegTree_FitMat", (DL_FUNC) &_RegTree_FitMat, 2},
    {"_RegTree_RegForest", (DL_FUNC) &_RegTree_RegForest, 4},
    {"_RegTree_FitField", (DL_FUNC) &_RegTree_FitField, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_RegTree(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
